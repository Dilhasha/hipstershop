name: Perform static analysis of code

on:
  workflow_dispatch:

jobs:

  static-analysis:
    name: Build with ${{ matrix.argument }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        argument: [CartService, IntegrationTestsSuite]

                # argument: [CartService, InventoryService, OrderService, PaymentService, ProductService, ShippingService, UserService, IntegrationTestsSuite]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Modify .bal files in the directory named as matrix.argument
      run: |
        # Check if the directory from matrix.argument exists and contains a .toml file
        if [[ -d "${{ matrix.argument }}" && -n $(find "${{ matrix.argument }}" -maxdepth 1 -type f -name "*.toml") ]]; then
            # Find the first .bal file in the directory
            bal_file=$(find "${{ matrix.argument }}" -maxdepth 1 -type f -name "*.bal" | head -n 1)
            if [[ ! -z "$bal_file" ]]; then
                # Append the required text to the beginning of the .bal file
                echo "import microrts/static_analyzer as _;" | cat - "$bal_file" > temp && mv temp "$bal_file"
            fi
        fi
    - name: Set BALLERINA_DEV_CENTRAL environment variable
      run: echo "BALLERINA_DEV_CENTRAL=true" >> $GITHUB_ENV

    - name: Ballerina Build with static analyzer
      uses: ballerina-platform/ballerina-action@master
      with:
        args: 
          build 
      env: 
        WORKING_DIR: ${{ matrix.argument }}
        
    - name: Upload test_svc_mappings as artifact if it exists
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.argument }}-test_svc_mappings
        path: ${{ matrix.argument }}/test_svc_mappings.json
    
    - name: Upload svc_path_mappings as artifact if it exists
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.argument }}-svc_path_mappings
        path: ${{ matrix.argument }}/svc_path_mappings.json


  combine-artifacts:
    needs: static-analysis
    runs-on: ubuntu-latest

    steps:
    - name: Check out repository
      uses: actions/checkout@v2

    # Download all artifacts (assuming they've already been generated in previous jobs or workflows)
    - name: Download all artifacts
      uses: actions/download-artifact@v2
      with:
        path: artifacts/

    # Install necessary tools (jq for JSON manipulation)
    - name: Install jq
      run: sudo apt-get install jq

    # Combine artifact contents
    - name: Combine and construct single file
      run: |
        # declare -A services

        for test_mapping in artifacts/*_test_svc_mappings.json; do
            service_name=$(basename $test_mapping | cut -d'_' -f1)
            svc_path_mapping="artifacts/${service_name}_svc_path_mappings.json"
            
            test_mapping_content=$(jq -c . $test_mapping)
            svc_path_mapping_content=$(jq -c . $svc_path_mapping)

            services[$service_name]="{\"${service_name}\": {\"testToSvcMapping\": $test_mapping_content, \"svcToPathMapping\": $svc_path_mapping_content}}"
        done

        combined_content="["
        for key in "${!services[@]}"; do
            combined_content+="${services[$key]},"
        done
        combined_content=${combined_content%,} # Removing the trailing comma
        combined_content+="]"

        echo "$combined_content" > combined_file.json

    - name: Upload mappings
      uses: actions/upload-artifact@v2
      with:
        name: combined_file.json
        path: combined_file.json


    # - name: Download static_analysis_results.json
    #   uses: actions/download-artifact@v2
    #   with:
    #     name: static-analysis-results
    #     path: static_analysis_results.json
    #   continue-on-error: true  # This ensures the workflow continues even if the artifact is not found (e.g., on the first run).
      
    # - name: Construct and append to file
    #   run: |
    #     [[ -f "${{ matrix.argument }}/test_svc_mappings.json" ]] && test_svc_content=$(cat "${{ matrix.argument }}/test_svc_mappings.json") || test_svc_content=""
    #     [[ -f "${{ matrix.argument }}/svc_path_mappings.json" ]] && svc_path_content=$(cat "${{ matrix.argument }}/svc_path_mappings.json") || svc_path_content=""

    #     echo "\"${{ matrix.argument }}\" : {\"testToSvcMapping\" : \"$test_svc_content\", \"svcToPathMapping\": \"$svc_path_content\"}," >> static_analysis_results.json

    # - name: Upload mappings
    #   uses: actions/upload-artifact@v2
    #   with:
    #     name: static_analysis_results
    #     path: static_analysis_results.json

    # - id: check-file
    #   nam xfcxswfgÃ§bn e: Check if file exists
    #   run: |
    #     if [[ -f "${{ matrix.argument }}/svc_path_mappings.json" ]]; then
    #       echo "::set-output name=exists::true"
    #     else
    #       echo "::set-output name=exists::false"
    #     fi

  # edit-build:
  #   runs-on: ubuntu-latest

  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v2

  #   - name: Set BALLERINA_DEV_CENTRAL environment variable
  #     run: echo "BALLERINA_DEV_CENTRAL=true" >> $GITHUB_ENV

  #   - name: Ballerina Build with static analyzer
  #     uses: ballerina-platform/ballerina-action@master
  #     with:
  #       args: 
  #         build 
  #     env: 
  #       WORKING_DIR: CartService
        
  #   - name: Modify .bal files in directories with TOML files
  #     run: |
  #       # Loop through directories containing .toml files
  #       for dir in $(find . -type f -name "*.toml" -exec dirname {} \; | sort -u); do
  #           # Find the first .bal file in the directory
  #           bal_file=$(find "$dir" -maxdepth 1 -type f -name "*.bal" | head -n 1)
  #           if [[ ! -z "$bal_file" ]]; then
  #               # Append the required text to the beginning of the .bal file
  #               echo "import microrts/static_analyzer as _;" | cat - "$bal_file" > temp && mv temp "$bal_file"
  #           fi
  #       done
  
  #   - name: Execute 'bal build' and create JSON 
  #     run: |
  #       # Install jq
  #       sudo apt-get install jq

  #       # Initialize result json array
  #       result_json='[]'

  #       # Loop through directories containing .toml files
  #       for dir in $(find . -type f -name "*.toml" -exec dirname {} \; | sort -u); do
  #           cd "$dir"

  #           # Execute bal build
  #           bal build

  #           # Assuming that bal build generates the .json files in the same directory
  #           if [[ -f "test_svc_mappings.json" && -f "svc_path_mappings.json" ]]; then
  #               test_svc_mappings=$(jq -r '.' test_svc_mappings.json)
  #               svc_path_mappings=$(jq -r '.' svc_path_mappings.json)

  #               # Create json for the current directory
  #               current_json=$(jq -n \
  #                               --arg dir "$dir" \
  #                               --arg test_svc_mappings "$test_svc_mappings" \
  #                               --arg svc_path_mappings "$svc_path_mappings" \
  #                               '{($dir): {"testToSvcMapping": $test_svc_mappings, "svcToPathMapping": $svc_path_mappings}}')

  #               # Add the current json to the result array
  #               result_json=$(echo "$result_json" | jq ". += [$current_json]")

  #               cd ..
  #           fi
  #       done

  #       # Print the result json array
  #       echo "$result_json" | jq '.'


  #   - name: Ballerina Build
  #     uses: ballerina-platform/ballerina-action@master
  #     with:
  #       args: 
  #         build
